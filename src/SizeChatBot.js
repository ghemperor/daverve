import React, { useState, useRef, useEffect } from 'react';

// Size chart data
const sizeChart = [
  { minHeight: 150, maxHeight: 159, minWeight: 40, maxWeight: 49, size: "XS" },
  { minHeight: 155, maxHeight: 164, minWeight: 45, maxWeight: 54, size: "S" },
  { minHeight: 160, maxHeight: 169, minWeight: 50, maxWeight: 59, size: "M" },
  { minHeight: 165, maxHeight: 174, minWeight: 55, maxWeight: 64, size: "L" },
  { minHeight: 170, maxHeight: 179, minWeight: 60, maxWeight: 74, size: "XL" },
  { minHeight: 175, maxHeight: 185, minWeight: 65, maxWeight: 85, size: "XXL" },
  { minHeight: 180, maxHeight: 200, minWeight: 75, maxWeight: 120, size: "XXXL" },
];

// Simple localStorage utility
const storage = {
  get: (key, defaultValue = null) => {
    try {
      const item = localStorage.getItem(key);
      return item ? JSON.parse(item) : defaultValue;
    } catch {
      return defaultValue;
    }
  },
  set: (key, value) => {
    try {
      localStorage.setItem(key, JSON.stringify(value));
    } catch {
      // Fail silently
    }
  }
};

// Mock responses for when API is down
const mockResponses = {
  'xin ch√†o': 'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω t∆∞ v·∫•n th·ªùi trang AI. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n ch·ªçn size ph√π h·ª£p v√† t∆∞ v·∫•n phong c√°ch. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨?',
  'm√πa h√®': 'M√πa h√® n√™n ch·ªçn c√°c ch·∫•t li·ªáu tho√°ng m√°t nh∆∞:\n\nüåø **Cotton**: Th·∫•m h√∫t m·ªì h√¥i t·ªët\nüåø **Linen**: Si√™u tho√°ng m√°t\nüåø **Modal**: M·ªÅm m·∫°i, m√°t m·∫ª\nüåø **Bamboo**: Kh√°ng khu·∫©n t·ª± nhi√™n\n\nTr√°nh: Polyester, v·∫£i d√†y.',
  'da ngƒÉm': 'Da ngƒÉm r·∫•t h·ª£p v·ªõi:\n\n‚ú® **M√†u s√°ng**: Tr·∫Øng, kem, pastel\n‚ú® **M√†u ƒë·∫•t**: N√¢u, be, camel\n‚ú® **M√†u jewel**: Ng·ªçc l·ª•c b·∫£o, sapphire\n‚ú® **M√†u coral**: H·ªìng cam, ƒë√†o\n\nTr√°nh: M√†u qu√° t·ªëi.',
  'cao h∆°n': 'ƒê·ªÉ tr√¥ng cao h∆°n:\n\nüìè **Qu·∫ßn high-waist**: T·∫°o ch√¢n d√†i\nüìè **√Åo crop-top**: T·ª∑ l·ªá ƒë·∫πp h∆°n\nüìè **Gi√†y cao g√≥t**: TƒÉng chi·ªÅu cao\nüìè **S·ªçc d·ªçc**: Hi·ªáu ·ª©ng thon d√†i\nüìè **T√¥ng m√†u ƒë·ªìng b·ªô**: Line li·ªÅn m·∫°ch',
  'g·∫ßy': 'Ng∆∞·ªùi g·∫ßy n√™n ch·ªçn:\n\nüí™ **√Åo c√≥ c·∫•u tr√∫c**: Blazer, vest\nüí™ **Layer nhi·ªÅu l·ªõp**: T·∫°o ƒë·ªô d√†y\nüí™ **H·ªça ti·∫øt to**: T·∫°o th·ªÉ t√≠ch\nüí™ **M√†u s√°ng**: C·∫£m gi√°c ƒë·∫ßy ƒë·∫∑n\nüí™ **Ch·∫•t li·ªáu d√†y**: Denim, tweed'
};

// Get size recommendation
const getSizeRecommendation = (height, weight) => {
  const possibleSizes = sizeChart.filter(item => 
    height >= item.minHeight && height <= item.maxHeight
  );
  
  if (possibleSizes.length === 0) {
    return 'Kh√¥ng t√¨m th·∫•y size ph√π h·ª£p';
  }
  
  let bestSize = possibleSizes[0];
  let minWeightDiff = Math.abs(weight - (bestSize.minWeight + bestSize.maxWeight) / 2);
  
  for (let i = 1; i < possibleSizes.length; i++) {
    const avgWeight = (possibleSizes[i].minWeight + possibleSizes[i].maxWeight) / 2;
    const diff = Math.abs(weight - avgWeight);
    if (diff < minWeightDiff) {
      bestSize = possibleSizes[i];
      minWeightDiff = diff;
    }
  }
  
  let warning = '';
  if (weight < bestSize.minWeight) warning = ' (C√¢n n·∫∑ng th·∫•p h∆°n khuy·∫øn ngh·ªã)';
  if (weight > bestSize.maxWeight) warning = ' (C√¢n n·∫∑ng cao h∆°n khuy·∫øn ngh·ªã)';
  
  return bestSize.size + warning;
};

// AI API call
const callAI = async (question) => {
  try {
    // Check for mock responses first
    const lowerQuestion = question.toLowerCase();
    for (const [key, response] of Object.entries(mockResponses)) {
      if (lowerQuestion.includes(key)) {
        return response;
      }
    }
    
    // Try real API
    const apiUrl = window.location.hostname === 'localhost' 
      ? 'http://localhost:4000/api/gemini' 
      : '/api/gemini';
    
    const res = await fetch(apiUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        contents: [{ parts: [{ text: question }] }]
      })
    });
    
    if (!res.ok) {
      return "Hi·ªán t·∫°i d·ªãch v·ª• AI ƒëang b·∫£o tr√¨. T√¥i v·∫´n c√≥ th·ªÉ t∆∞ v·∫•n size v√† c√¢u h·ªèi c∆° b·∫£n. H√£y th·ª≠ h·ªèi v·ªÅ chi·ªÅu cao, c√¢n n·∫∑ng!";
    }
    
    const data = await res.json();
    return data.candidates?.[0]?.content?.parts?.[0]?.text || "Xin l·ªói, t√¥i ch∆∞a hi·ªÉu c√¢u h·ªèi c·ªßa b·∫°n.";
    
  } catch (error) {
    return "T√¥i ƒëang g·∫∑p v·∫•n ƒë·ªÅ k·ªπ thu·∫≠t. H√£y th·ª≠ h·ªèi v·ªÅ size ho·∫∑c c√°c c√¢u h·ªèi th·ªùi trang c∆° b·∫£n!";
  }
};

// Generate bot reply
const generateReply = async (userInput) => {
  const text = userInput.toLowerCase().trim();
  
  // Check for height/weight pattern
  const heightMatch = text.match(/(\d{1,3})\s*(?:cm|chi·ªÅu cao)/i) || 
                     text.match(/(\d)\s*m\s*(\d{1,2})/i) ||
                     text.match(/(\d\.\d{1,2})\s*m/i);
  const weightMatch = text.match(/(\d{2,3})\s*(?:kg|c√¢n n·∫∑ng|kilo)/i);
  
  let height = null, weight = null;
  
  if (heightMatch) {
    if (heightMatch[2]) { // Format: 1m70
      height = parseInt(heightMatch[1]) * 100 + parseInt(heightMatch[2]);
    } else if (text.includes('.')) { // Format: 1.70m
      height = Math.round(parseFloat(heightMatch[1]) * 100);
    } else { // Format: 170cm
      height = parseInt(heightMatch[1]);
    }
  }
  
  if (weightMatch) {
    weight = parseInt(weightMatch[1]);
  }
  
  // Size recommendation
  if (height && weight) {
    if (height < 140 || height > 210 || weight < 30 || weight > 150) {
      return "Th√¥ng tin n·∫±m ngo√†i ph·∫°m vi t∆∞ v·∫•n (140-210cm, 30-150kg). Vui l√≤ng ki·ªÉm tra l·∫°i.";
    }
    const size = getSizeRecommendation(height, weight);
    return `V·ªõi chi·ªÅu cao ${height}cm v√† c√¢n n·∫∑ng ${weight}kg:\n\nüéØ **Size ph√π h·ª£p: ${size}**\n\nL∆∞u √Ω: ƒê√¢y l√† g·ª£i √Ω, b·∫°n n√™n tham kh·∫£o b·∫£ng size chi ti·∫øt c·ªßa t·ª´ng s·∫£n ph·∫©m.`;
  }
  
  // Call AI for other questions
  return await callAI(userInput);
};

const SizeChatBot = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState([]);
  const [inputText, setInputText] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef(null);
  
  // Initialize messages
  useEffect(() => {
    const saved = storage.get('chatHistory');
    if (saved && Array.isArray(saved) && saved.length > 0) {
      setMessages(saved);
    } else {
      const welcomeMessage = {
        id: 'welcome',
        type: 'bot',
        text: 'Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n ch·ªçn size ph√π h·ª£p. Vui l√≤ng cho t√¥i bi·∫øt chi·ªÅu cao (cm) v√† c√¢n n·∫∑ng (kg) c·ªßa b·∫°n.',
        timestamp: new Date().toISOString()
      };
      setMessages([welcomeMessage]);
      storage.set('chatHistory', [welcomeMessage]);
    }
  }, []);
  
  // Save messages to storage
  useEffect(() => {
    if (messages.length > 0) {
      storage.set('chatHistory', messages);
    }
  }, [messages]);
  
  // Auto scroll
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);
  
  // Send message
  const sendMessage = async () => {
    if (!inputText.trim() || isLoading) return;
    
    const userMessage = {
      id: `user_${Date.now()}`,
      type: 'user',
      text: inputText.trim(),
      timestamp: new Date().toISOString()
    };
    
    setMessages(prev => [...prev, userMessage]);
    setInputText('');
    setIsLoading(true);
    
    try {
      const botReply = await generateReply(inputText.trim());
      const botMessage = {
        id: `bot_${Date.now()}`,
        type: 'bot',
        text: botReply,
        timestamp: new Date().toISOString()
      };
      setMessages(prev => [...prev, botMessage]);
    } catch (error) {
      const errorMessage = {
        id: `error_${Date.now()}`,
        type: 'bot',
        text: 'Xin l·ªói, t√¥i g·∫∑p v·∫•n ƒë·ªÅ k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i!',
        timestamp: new Date().toISOString()
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };
  
  // Reset chat
  const resetChat = () => {
    const welcomeMessage = {
      id: 'welcome_new',
      type: 'bot',
      text: 'Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n ch·ªçn size ph√π h·ª£p. Vui l√≤ng cho t√¥i bi·∫øt chi·ªÅu cao (cm) v√† c√¢n n·∫∑ng (kg) c·ªßa b·∫°n.',
      timestamp: new Date().toISOString()
    };
    setMessages([welcomeMessage]);
    storage.set('chatHistory', [welcomeMessage]);
    setIsLoading(false);
  };
  
  // Format timestamp
  const formatTime = (timestamp) => {
    try {
      return new Date(timestamp).toLocaleTimeString('vi-VN', {
        hour: '2-digit',
        minute: '2-digit'
      });
    } catch {
      return '';
    }
  };
  
  // Handle Enter key
  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };
  
  // Suggested questions
  const suggestedQuestions = [
    "T√¥i cao 1m65 n·∫∑ng 55kg",
    "M√πa h√® n√™n m·∫∑c ch·∫•t li·ªáu g√¨?",
    "Da ngƒÉm n√™n m·∫∑c m√†u g√¨?",
    "L√†m sao ƒë·ªÉ tr√¥ng cao h∆°n?",
    "Ng∆∞·ªùi g·∫ßy n√™n m·∫∑c g√¨?",
    "Xin ch√†o"
  ];
  
  return (
    <>
      {/* Chat Button */}
      <div className="fixed bottom-24 right-4 z-50">
        <button
          onClick={() => setIsOpen(!isOpen)}
          className="bg-black text-white rounded-full w-14 h-14 flex items-center justify-center shadow-lg hover:bg-gray-800 transition-colors"
        >
          {isOpen ? (
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          ) : (
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
            </svg>
          )}
        </button>
      </div>

      {/* Chat Window */}
      {isOpen && (
        <div className="fixed bottom-32 right-4 w-80 h-96 bg-white rounded-lg shadow-xl border border-gray-200 z-50 flex flex-col">
          {/* Header */}
          <div className="bg-black text-white p-4 rounded-t-lg flex items-center justify-between">
            <div className="flex items-center gap-2">
              <div className="w-8 h-8 bg-white rounded-full flex items-center justify-center">
                <span className="text-black font-bold text-sm">AI</span>
              </div>
              <div>
                <h3 className="font-bold">T∆∞ v·∫•n ch·ªçn size</h3>
                <p className="text-xs text-gray-300">H·ªó tr·ª£ 24/7</p>
              </div>
            </div>
            <div className="flex items-center gap-2">
              <button
                onClick={resetChat}
                className="p-1 rounded hover:bg-white/20 transition-colors"
                title="Reset cu·ªôc tr√≤ chuy·ªán"
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                </svg>
              </button>
              <button
                onClick={() => setIsOpen(false)}
                className="p-1 rounded hover:bg-white/20 transition-colors"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
          </div>

          {/* Messages */}
          <div className="flex-1 overflow-y-auto p-4 space-y-3">
            {/* Suggested Questions */}
            {messages.filter(m => m.type === 'user').length === 0 && !isLoading && (
              <div className="bg-gray-50 rounded-lg p-3 border">
                <div className="text-xs mb-2 text-gray-600 font-medium">C√¢u h·ªèi g·ª£i √Ω:</div>
                <div className="flex flex-wrap gap-2">
                  {suggestedQuestions.map((question, idx) => (
                    <button
                      key={idx}
                      onClick={() => {
                        setInputText(question);
                        setTimeout(sendMessage, 100);
                      }}
                      className="bg-white hover:bg-gray-100 text-gray-700 text-xs rounded-full px-3 py-1 border transition-colors"
                      disabled={isLoading}
                    >
                      {question}
                    </button>
                  ))}
                </div>
              </div>
            )}
            
            {/* Messages */}
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
              >
                <div
                  className={`max-w-xs px-3 py-2 rounded-lg ${
                    message.type === 'user'
                      ? 'bg-black text-white rounded-br-none'
                      : 'bg-gray-100 text-gray-800 rounded-bl-none'
                  }`}
                >
                  <p className="text-sm whitespace-pre-line">{message.text}</p>
                  <p className="text-xs opacity-70 mt-1">
                    {formatTime(message.timestamp)}
                  </p>
                </div>
              </div>
            ))}
            
            {/* Loading */}
            {isLoading && (
              <div className="flex justify-start">
                <div className="bg-gray-100 text-gray-800 rounded-lg px-3 py-2">
                  <div className="flex items-center gap-2">
                    <div className="w-4 h-4 border-2 border-gray-300 border-t-gray-600 rounded-full animate-spin"></div>
                    <span className="text-sm">ƒêang suy nghƒ©...</span>
                  </div>
                </div>
              </div>
            )}
            
            <div ref={messagesEndRef} />
          </div>

          {/* Input */}
          <div className="p-4 border-t">
            <div className="flex gap-2">
              <input
                type="text"
                value={inputText}
                onChange={(e) => setInputText(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="Nh·∫≠p tin nh·∫Øn..."
                className="flex-1 border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-black focus:border-transparent"
                disabled={isLoading}
              />
              <button
                onClick={sendMessage}
                disabled={!inputText.trim() || isLoading}
                className="bg-black text-white px-4 py-2 rounded-lg text-sm font-medium hover:bg-gray-800 transition-colors disabled:bg-gray-300 disabled:cursor-not-allowed"
              >
                G·ª≠i
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
};

export default SizeChatBot; 